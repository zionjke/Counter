{"version":3,"sources":["components/Button.js","components/Counter.js","components/Input.js","components/Settings.js","redux/reducer.js","App.js","serviceWorker.js","redux/store.js","index.js","components/Counter.module.css","components/Settings.module.css"],"names":["Button","render","onClick","props","className","disabled","buttonName","React","Component","Counter","spanClass","state","counter","maxValue","incrementButtonDisabled","resetButtonDisabled","startValue","styles","container","display","buttons","incrementHandler","button","resetHandler","Input","type","value","onChange","Settings","e","changeMaxValue","currentTarget","valueAsNumber","minValue","changeStartValue","classForInput","errorInput","buttonBlock","setNewValue","setButtonDisabled","initialState","errorCounterValue","setCounterValue","counterReducer","action","newMaxValue","Number","newStartValue","MyCounter","increment","reset","newValue","connect","dispatch","maxValueAC","startValueAC","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0c4002fe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <button onClick={this.props.onClick} className={this.props.className} disabled={this.props.disabled} >\r\n                {this.props.buttonName}\r\n            </button>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from \"./Button\";\r\nimport styles from './Counter.module.css'\r\n\r\n\r\nclass Counter extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        let spanClass = this.props.state.counter === this.props.state.maxValue ||\r\n                        this.props.state.counter === \"error\" ? \"red_value\" : \"\";\r\n\r\n        let incrementButtonDisabled = this.props.state.counter === this.props.state.maxValue ||\r\n                                      this.props.state.counter === \"press set\" ||\r\n                                      this.props.state.counter === \"error\"\r\n\r\n        let resetButtonDisabled = this.props.state.counter === this.props.state.startValue ||\r\n                                  this.props.state.counter === \"press set\" ||\r\n                                  this.props.state.counter === \"error\"\r\n\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.display}>\r\n            <span className={spanClass}>\r\n                {this.props.state.counter}\r\n            </span>\r\n                </div>\r\n                <div className={styles.buttons}>\r\n                    <Button buttonName=\"+\"\r\n                            onClick={this.props.incrementHandler}\r\n                            disabled={incrementButtonDisabled}\r\n                            className={styles.button}/>\r\n                    <Button buttonName=\"Reset\"\r\n                            onClick={this.props.resetHandler}\r\n                            disabled={resetButtonDisabled}\r\n                            className={styles.button}/>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n};\r\n\r\nexport default Counter;\r\n","import React from 'react';\r\n\r\nclass Input extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <input className={this.props.className}\r\n                   type={this.props.type}\r\n                   value={this.props.value}\r\n                   onChange={this.props.onChange}/>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport styles from './Settings.module.css'\r\nimport Input from \"./Input\";\r\nimport Button from \"./Button\";\r\n\r\n\r\nclass Settings extends React.Component {\r\n\r\n\r\n    maxValue = (e) => {\r\n        this.props.changeMaxValue(e.currentTarget.valueAsNumber)\r\n    };\r\n\r\n    minValue = (e) => {\r\n     this.props.changeStartValue(e.currentTarget.valueAsNumber)\r\n    };\r\n\r\n\r\n    render = () => {\r\n\r\n        let classForInput =  this.props.state.counter === \"error\" && styles.errorInput\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                    <div className={styles.display}>\r\n                            <span>max value: </span>\r\n                            <Input className={classForInput}\r\n                                   type=\"number\"\r\n                                   value={this.props.state.maxValue}\r\n                                   onChange={this.maxValue}/>\r\n\r\n                            <span>start value: </span>\r\n                            <Input className={classForInput}\r\n                                   type=\"number\"\r\n                                   value={this.props.state.startValue}\r\n                                   onChange={this.minValue}/>\r\n                    </div>\r\n                <div className={styles.buttonBlock}>\r\n                    <Button className={styles.button}\r\n                            onClick={this.props.setNewValue}\r\n                            buttonName=\"Set\"\r\n                            disabled={this.props.state.setButtonDisabled}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n};\r\n\r\nexport default Settings;\r\n","const INCREMENT = 'INCREMENT';\r\nconst RESET = 'RESET';\r\nconst CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE';\r\nconst CHANGE_START_VALUE = 'CHANGE_START_VALUE';\r\nconst SET_NEW_VALUE = 'SET_NEW_VALUE'\r\n\r\n\r\nconst initialState = {\r\n    startValue: 0,\r\n    maxValue:5,\r\n    counter: 0,\r\n    setButtonDisabled: true,\r\n    errorCounterValue: 'error',\r\n    setCounterValue: 'press set'\r\n};\r\n\r\nconst counterReducer = (state = initialState,action) => {\r\n    switch (action.type) {\r\n        case INCREMENT:\r\n            return {\r\n                ...state,\r\n                counter: state.counter + 1\r\n            };\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                counter: state.startValue\r\n            };\r\n        case CHANGE_MAX_VALUE:\r\n            if(action.newMaxValue < 0 || action.newMaxValue <= state.startValue || state.startValue < 0) {\r\n                return {\r\n                    ...state,\r\n                    counter: state.errorCounterValue,\r\n                    maxValue: Number(action.newMaxValue),\r\n                    setButtonDisabled: true,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    counter: state.setCounterValue,\r\n                    maxValue: Number(action.newMaxValue),\r\n                    setButtonDisabled: false,\r\n                }\r\n            }\r\n        case CHANGE_START_VALUE:\r\n            if(action.newStartValue < 0 || action.newStartValue >= state.maxValue) {\r\n                return {\r\n                    ...state,\r\n                    counter: state.errorCounterValue,\r\n                    startValue: Number(action.newStartValue),\r\n                    setButtonDisabled: true\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    counter: state.setCounterValue,\r\n                    startValue: Number(action.newStartValue),\r\n                    setButtonDisabled: false\r\n                }\r\n            }\r\n        case SET_NEW_VALUE:\r\n            return {\r\n                ...state,\r\n                counter: state.startValue,\r\n                setButtonDisabled: true\r\n            }\r\n    }\r\n    return state\r\n}\r\n\r\nexport const incrementAC = () => {\r\n    return {\r\n        type: INCREMENT\r\n    }\r\n}\r\n\r\nexport const resetAC = () => {\r\n    return {\r\n        type: RESET\r\n    }\r\n}\r\n\r\nexport const maxValueAC = (newMaxValue) => {\r\n    return {\r\n        type: CHANGE_MAX_VALUE,\r\n        newMaxValue\r\n    }\r\n}\r\n\r\nexport const startValueAC = (newStartValue) => {\r\n    return {\r\n        type: CHANGE_START_VALUE,\r\n        newStartValue\r\n    }\r\n}\r\n\r\nexport const setValueAC = () => {\r\n    return {\r\n        type: SET_NEW_VALUE,\r\n\r\n    }\r\n}\r\n\r\nexport default counterReducer","import React from 'react';\r\nimport './App.css';\r\nimport Counter from \"./components/Counter\";\r\nimport Settings from \"./components/Settings\";\r\nimport {connect} from \"react-redux\";\r\nimport {incrementAC, maxValueAC, resetAC, setValueAC, startValueAC} from \"./redux/reducer\";\r\n\r\nclass MyCounter extends React.Component {\r\n\r\n    incrementHandler = () => {\r\n        this.props.increment()\r\n    };\r\n\r\n    resetHandler = () => {\r\n        this.props.reset()\r\n    };\r\n\r\n    changeMaxValue = (newMaxValue) => {\r\n        this.props.maxValue(newMaxValue)\r\n    };\r\n\r\n    changeStartValue = (newStartValue) => {\r\n        this.props.startValue(newStartValue)\r\n\r\n    };\r\n\r\n    setNewValue = () => {\r\n        this.props.newValue()\r\n    };\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className='settings'>\r\n                    <Settings changeMaxValue={this.changeMaxValue}\r\n                              changeStartValue={this.changeStartValue}\r\n                              setNewValue={this.setNewValue}\r\n                              state={this.props.counter}/>\r\n                </div>\r\n                <div className='counter'>\r\n                    <Counter state={this.props.counter}\r\n                             incrementHandler={this.incrementHandler}\r\n                             resetHandler={this.resetHandler}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        counter: state.counter\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        increment: () => {\r\n            const action = incrementAC();\r\n            dispatch(action)\r\n        },\r\n        reset: () => {\r\n            const action = resetAC()\r\n            dispatch(action)\r\n        },\r\n        maxValue: (newMaxValue) => {\r\n            const action = maxValueAC(newMaxValue);\r\n            dispatch(action)\r\n        },\r\n        startValue: (newStartValue) => {\r\n            const action = startValueAC(newStartValue);\r\n            dispatch(action)\r\n        },\r\n        newValue: () => {\r\n            const action = setValueAC();\r\n            dispatch(action)\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyCounter)","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport counterReducer from \"./../redux/reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    counter:counterReducer,\r\n})\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunk));\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n        <React.StrictMode>\r\n            <App/>\r\n        </React.StrictMode>\r\n    </Provider>,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter_container__jpdzJ\",\"display\":\"Counter_display__2OdXM\",\"buttons\":\"Counter_buttons__BxoIU\",\"button\":\"Counter_button__2JUKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Settings_container__v8UZP\",\"display\":\"Settings_display__3xwU8\",\"errorInput\":\"Settings_errorInput__-2oMr\",\"buttonBlock\":\"Settings_buttonBlock__9_LyT\",\"button\":\"Settings_button__3gPtG\"};"],"sourceRoot":""}